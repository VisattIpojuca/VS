import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="Painel Gratifica√ß√£o SUS", layout="wide")
st.title("Painel de Indicadores - Gratifica√ß√£o SUS")

# Fun√ß√£o para carregar os dados
def load_data():
    url = "https://docs.google.com/spreadsheets/d/1MpjevwLmc4w0OF4ffZEaOhd5hLWaH6FL/export?format=csv&gid=793227745"
    df = pd.read_csv(url)
    return df

df = load_data()

# Limpeza de dados (exemplo considerando a estrutura da imagem)
df.columns = df.columns.str.strip().str.lower()
df = df.rename(columns={'indicador/m√™s': 'indicador'})

# Separando os indicadores
indicadores = df['indicador'].dropna().unique()

# Filtros
st.sidebar.header("Filtros")
indicador_selecionado = st.sidebar.selectbox("Selecione o indicador", indicadores)

# Verifica se o indicador √© mensal ou por ciclo
if indicador_selecionado == 'Propor√ß√£o de casos de doen√ßas de notifica√ß√£o compuls√≥ria imediata nacional (DNCI) encerrados em at√© 60 (sessenta) dias ap√≥s notifica√ß√£o.':
    tipo = 'mensal'
elif indicador_selecionado == 'Propor√ß√£o de preenchimento dos campos ‚ÄúOcupa√ß√£o‚Äù e ‚ÄúAtividade Econ√¥mica (CNAE)‚Äù nas notifica√ß√µes de acidente de trabalho, acidente de trabalho com exposi√ß√£o a material biol√≥gico e intoxica√ß√£o ex√≥gena segundo munic√≠pio de notifica√ß√£o.':
    tipo = 'mensal'
elif indicador_selecionado == 'Realizar a primeira inspe√ß√£o para emiss√£o de licen√ßa sanit√°ria de alto risco em 30 dias a partir do recebimento do processo pela REDESIM.':
    tipo = 'mensal'
else:
    tipo = 'ciclo'

# Filtrando dados
if tipo == 'mensal':
    meses = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
    df_filtrado = df[df['indicador'] == indicador_selecionado][['indicador'] + meses + ['meta']]
else:
    ciclos = ['1¬∫ ciclo', '2¬∫ ciclo', '3¬∫ ciclo', '4¬∫ ciclo']
    df_filtrado = df[df['indicador'] == indicador_selecionado][['indicador'] + ciclos + ['meta']]

st.subheader("Resumo da Sele√ß√£o")
st.dataframe(df_filtrado)

# Verifica√ß√£o de Meta
meta = df_filtrado['meta'].values[0] if not df_filtrado['meta'].isnull().all() else 'N√£o informada'
st.info(f"Meta para este indicador: {meta}")

# Download dos dados
@st.cache_data
def convert_df(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Indicadores')
    processed_data = output.getvalue()
    return processed_data

st.download_button(
    label="üì• Baixar tabela em Excel",
    data=convert_df(df_filtrado),
    file_name='dados_indicadores.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)

st.caption("Fonte: Planilha Gratifica√ß√£o SUS")